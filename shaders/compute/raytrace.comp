#version 450 core

layout (local_size_x = 2, local_size_y = 2, local_size_z = 1) in;
layout (rgba32f, binding = 0) uniform writeonly restrict image2D img_output;

layout (std140, binding = 2) uniform EyeCoords {
    vec2 coord_scale;
    vec2 coord_dims;
    vec3 eye_pos;
    mat3 eye_coord_frame;
};

struct Ray {
    vec3 point;
    vec3 direction;
};

struct PointLight {
    vec3 position;
    vec3 attenuation;
};

struct Sphere {
    vec3 center;
    float radius;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct Triangle {
    vec3 vertices[3];
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct Intersection {
    bool intersects;
    float distance;
    vec3 position;
};

const int RECURSION_DEPTH = 2;
const int NUM_SPHERES = 4;
const int NUM_LIGHTS = 3;

const PointLight lights[NUM_LIGHTS] = {
    PointLight(vec3(1.5, 1.5, -2.0), vec3(1.0, 0.045, 0.016)),
    PointLight(vec3(-1.5, 1.5, -2.0), vec3(1.0, 0.045, 0.016)),
    PointLight(vec3(0.0, 1.5, 2.0), vec3(1.0, 0.045, 0.016))
};

const Sphere spheres[NUM_SPHERES] = {
    Sphere(vec3(0.0, 0.0, 0.0), 1.0, vec3(0.01, 0.1, 0.01), vec3(0.2, 0.3, 0.2), vec3(0.3, 0.4, 0.3)),
    Sphere(vec3(3.0, 0.0, 0.0), 1.0, vec3(0.1, 0.01, 0.01), vec3(0.3, 0.2, 0.2), vec3(0.4, 0.3, 0.3)),
    Sphere(vec3(-3.0, 0.0, 0.0), 1.0, vec3(0.01, 0.01, 0.1), vec3(0.2, 0.2, 0.3), vec3(0.3, 0.3, 0.4)),
    Sphere(vec3(0.0, -3.0, 0.0), 1.0, vec3(0.1, 0.1, 0.01), vec3(0.3, 0.3, 0.2), vec3(0.4, 0.4, 0.3))
};


Intersection intersects(Ray ray, Sphere sphere) {
    // offset of sphere center from ray point
    vec3 l = sphere.center - ray.point;
    // projection of l onto ray direction
    float s = dot(l, ray.direction);
    float l2 = dot(l, l);
    float r2 = sphere.radius * sphere.radius;

    // sphere is behind ray
    if (s < 0.0 && l2 > r2) {
        return Intersection(false, 0.0, vec3(0.0));
    }

    // distance from center to ray
    float m2 = l2 - s * s;

    // ray misses sphere
    if (m2 > r2) {
        return Intersection(false, 0.0, vec3(0.0));
    }

    // distance to sphere edge
    float q = sqrt(r2 - m2);

    float t;
    // ray originates outside sphere
    if (l2 > r2) {
        t = s - q;
    // ray originates inside sphere
    } else {
        t = s + q;
    }

    return Intersection(true, t, ray.point + t * ray.direction);
}

bool intersects_object_to_light(Ray ray, float light_distance) {
    for (int i = 0; i < NUM_SPHERES; i++) {
        Intersection intersection = intersects(ray, spheres[i]);
        if (intersection.intersects && intersection.distance < light_distance) {
            return true;
        }
    }
    return false;
}

vec3 sphere_normal(Sphere sphere, vec3 position) {
    return normalize(position - sphere.center);
}

vec3 calc_light_color(PointLight light, float light_distance, vec3 frag_pos,
                      vec3 eye_pos, vec3 normal, Sphere sphere) {
    vec3 light_dir = normalize(light.position - frag_pos);
    vec3 eye_dir = normalize(eye_pos - frag_pos);
    vec3 half_vec = normalize(light_dir + eye_dir);
    vec3 diffuse = sphere.diffuse * max(dot(normal, light_dir), 0.0);
    vec3 specular = sphere.specular * pow(max(dot(normal, half_vec), 0.0), 32);
    return (diffuse + specular) /
            dot(light.attenuation, vec3(1.0, light_distance, light_distance * light_distance));
}

void main() {
    const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    const vec2 coords = pixel_coords - coord_dims;
    const vec2 alpha_beta = coord_scale * coords;

    vec3 ray_dir = normalize(alpha_beta.x * eye_coord_frame[0] +
                             alpha_beta.y * eye_coord_frame[1] -
                                            eye_coord_frame[2]);
    vec3 ray_pos = eye_pos;
    vec3 reflectiveness = vec3(1.0);

    vec3 color = vec3(0.0);

    for (int i = 0; i < RECURSION_DEPTH; i++) {
        if (length(reflectiveness) < 1e-3) {
            break;
        }

        Ray ray = Ray(ray_pos, ray_dir);

        Intersection min_intersection = Intersection(false, 1.0 / 0.0, vec3(0.0));
        int min_sphere;

        for (int i = 0; i < NUM_SPHERES; i++) {
            Intersection intersection = intersects(ray, spheres[i]);
            if (intersection.intersects && intersection.distance < min_intersection.distance) {
                min_intersection = intersection;
                min_sphere = i;
            }
        }

        if (!min_intersection.intersects) {
            continue;
        }

        vec3 current_color = spheres[min_sphere].ambient;
        vec3 normal = sphere_normal(spheres[min_sphere], min_intersection.position);

        for (int i = 0; i < NUM_LIGHTS; i++) {
            vec3 ray_to_light_dir = lights[i].position - min_intersection.position;
            float ray_to_light_distance = length(ray_to_light_dir);
            ray_to_light_dir = normalize(ray_to_light_dir);
            vec3 ray_to_light_point = min_intersection.position + ray_to_light_dir * 1e-2;
            Ray light_ray = Ray(ray_to_light_point, ray_to_light_dir);

            if (!intersects_object_to_light(light_ray, ray_to_light_distance)) {
                current_color += calc_light_color(lights[i], ray_to_light_distance,
                                                  min_intersection.position,
                                                  eye_pos, normal, spheres[min_sphere]);
            }
        }

        color += reflectiveness * current_color;

        ray_dir = reflect(ray_dir, normal);
        ray_pos = min_intersection.position + ray_dir * 1e-2;
        reflectiveness *= spheres[min_sphere].specular;
    }

    imageStore(img_output, pixel_coords, vec4(color, 1.0));
}
