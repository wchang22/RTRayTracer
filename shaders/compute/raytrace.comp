#version 450 core

layout (local_size_x = 32, local_size_y = 24) in;
layout (rgba8, binding = 0) uniform writeonly restrict image2D img_output;

const float PI = 3.14159265359;
const float INV_PI = 1.0 / PI;
const float INF = 1.0 / 0.0;

struct Ray {
    vec3 point;
    vec3 direction;
    float length;
    int intersectable_index;
};

struct Light {
    vec4 position;
    vec4 color;
};

struct Intersectable {
    vec4 data[3];
};

struct Material {
    vec4 albedo;
    vec4 mra;
    vec4 reflectance;
};

struct KDNode {
    vec4 center;
    vec4 half_lengths;
    int left;
    int right;
    int intersectables_offset;
    int num_intersectables;
};

struct KDData {
    int index;
    int type;
};

layout (std140, binding = 2) uniform EyeCoords {
    vec2 coord_scale;
    vec2 coord_dims;
    vec3 eye_pos;
    mat3 eye_coord_frame;
};

layout (std140, binding = 3) uniform NumObjects {
    int num_spheres;
    int num_triangles;
    int num_aabbs;
};

layout (std430, binding = 4) buffer Intersectables {
    Intersectable intersectables[];
};

layout (std430, binding = 5) buffer Materials {
    Material materials[];
};

layout (std140, binding = 6) uniform NumLights {
    int num_point_lights;
};

layout (std430, binding = 7) buffer Lights {
    Light lights[];
};

layout (std430, binding = 8) buffer KDTree {
    KDNode kd_tree[];
};

layout (std430, binding = 9) buffer KDContains {
    KDData kd_contains[];
};

void unpack(in vec4 data_in[3], out vec3 data_out[4]) {
    data_out[0] = data_in[0].xyz;
    data_out[1] = data_in[1].xyz;
    data_out[2] = data_in[2].xyz;
    data_out[3] = vec3(data_in[0].w, data_in[1].w, data_in[2].w);
}

Ray create_ray(vec3 point, vec3 direction) {
    return Ray(point + direction * 1e-2, direction, INF, -1);
}

// Sphere intersection
bool intersects(inout Ray ray, int intersectable_index, vec3 center, float r2) {
    // offset of sphere center from ray point
    vec3 l = center - ray.point;
    // projection of l onto ray direction
    float s = dot(l, ray.direction);
    float l2 = dot(l, l);

    // sphere is behind ray
    if (l2 > r2 && s < 0.0) {
        return false;
    }

    // distance from center to ray
    float m2 = l2 - s * s;

    // ray misses sphere
    if (m2 > r2) {
        return false;
    }

    // distance to sphere edge
    float q = sqrt(r2 - m2);

    // determine if ray originates outside/inside sphere
    float t = s + (l2 > r2 ? -q : q);

    if (t >= ray.length) {
        return false;
    }

    ray.length = t;
    ray.intersectable_index = intersectable_index;
    return true;
}

// Triangle intersection
bool intersects(inout Ray ray, int intersectable_index,
                vec3 vertex, vec3 normal, vec3 edge1, vec3 edge2) {
    float a = dot(-normal, ray.direction);

    float f = 1.0 / a;
    vec3 s = ray.point - vertex;
    float t = f * dot(normal, s);

    if (t < 0.0 || t >= ray.length) {
        return false;
    }

    vec3 m = cross(s, ray.direction);
    float u = f * dot(m, edge2);

    if (u < 0.0) {
        return false;
    }

    float v = f * dot(-m, edge1);

    if (v < 0.0 || u + v > 1.0) {
        return false;
    }

    ray.length = t;
    ray.intersectable_index = intersectable_index;
    return true;
}

// AABB intersection
bool intersects(inout Ray ray, int intersectable_index, vec3 bound1, vec3 bound2) {
    vec3 inv_direction = 1.0 / ray.direction;
    // Find slab bounds on AABB
    vec3 t1 = (bound1 - ray.point) * inv_direction;
    vec3 t2 = (bound2 - ray.point) * inv_direction;
    vec3 tvmin = min(t1, t2);
    vec3 tvmax = max(t1, t2);

    // Find tighest components of min and max
    float tmin = max(tvmin.x, max(tvmin.y, tvmin.z));
    float tmax = min(tvmax.x, min(tvmax.y, tvmax.z));

    // Determine if ray misses, is in front of AABB or if intersection is not closer
    // than an existing one
    if (tmin > tmax || tmax < 0 || tmin >= ray.length) {
        return false;
    }

    ray.length = tmin > 0 ? tmin : tmax;
    ray.intersectable_index = intersectable_index;
    return true;
}

void intersects_sphere(inout Ray ray, int intersectable_index) {
    vec4 center_r2 = intersectables[intersectable_index].data[0];
    intersects(ray, intersectable_index, center_r2.xyz, center_r2.w);
}

void intersects_triangle(inout Ray ray, int intersectable_index) {
    vec3 vne1e2[4];
    unpack(intersectables[intersectable_index].data, vne1e2);
    intersects(ray, intersectable_index, vne1e2[0], vne1e2[1], vne1e2[2], vne1e2[3]);
}

void intersects_aabb(inout Ray ray, int intersectable_index) {
    Intersectable intersectable = intersectables[intersectable_index];
    intersects(ray, intersectable_index, intersectable.data[0].xyz, intersectable.data[1].xyz);
}

bool intersects_object(inout Ray ray, float max_distance) {
    for (int i = 0; i < num_spheres; i++) {
        intersects_sphere(ray, i);
    }
    for (int i = num_spheres; i < num_triangles + num_spheres; i++) {
        intersects_triangle(ray, i);
    }
    for (int i = num_triangles + num_spheres; i < num_triangles + num_spheres + num_aabbs; i++) {
        intersects_aabb(ray, i);
    }

    return ray.length < max_distance;
}

bool intersects_object(inout Ray ray) {
    return intersects_object(ray, INF);
}

vec3 fresnel_schlick(float cos_theta, vec3 f0) {
    return f0 + (1.0 - f0) * pow(1.0 - cos_theta, 5.0);
}

float distribution_ggx(float n_dot_h_2, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;

    float denom = n_dot_h_2 * (a2 - 1.0) + 1.0;
    denom = PI * denom * denom;

    return a2 / denom;
}

float geometry_smith(float n_dot_v, float n_dot_l, float nvl, float roughness) {
    float r = roughness + 1.0;
    float k = r * r / 8.0;
    float m = 1.0 - k;

    return nvl / ((n_dot_v * m + k) * (n_dot_l * m + k));
}

vec3 calc_color(vec3 source_pos, vec3 source_color, float source_dist2,
                vec3 eye_pos, vec3 frag_pos, vec3 frag_normal, Material frag_material) {
    vec3 light_dir = normalize(source_pos - frag_pos);
    vec3 view_dir = normalize(eye_pos - frag_pos);
    vec3 half_vec = normalize(light_dir + view_dir);

    float n_dot_v = max(dot(frag_normal, view_dir), 0.0);
    float n_dot_l = max(dot(frag_normal, light_dir), 0.0);
    float n_dot_h = max(dot(frag_normal, half_vec), 0.0);
    float h_dot_v = max(dot(half_vec, view_dir), 0.0);
    float nvl = n_dot_v * n_dot_l;
    float n_dot_h_2 = n_dot_h * n_dot_h;

    vec3 albedo = frag_material.albedo.xyz;
    float metallic = frag_material.mra.x;
    float roughness = frag_material.mra.y;

    // normal distribution function
    float d = distribution_ggx(n_dot_h_2, roughness);
    // fresnel equation
    vec3 f = fresnel_schlick(h_dot_v, mix(vec3(0.04), albedo, metallic));
    // geometry function
    float g = geometry_smith(n_dot_v, n_dot_l, nvl, roughness);

    // specularity
    vec3 kS = f;
    // diffuse
    vec3 kD = (1.0 - kS) * (1.0 - metallic);

    vec3 brdf = kD * albedo * INV_PI + d * f * g / max(4.0 * nvl, 1e-3);
    vec3 radiance = source_color / max(source_dist2, 1.0);

    return brdf * radiance * n_dot_l;
}

vec3 tone_mapping(vec3 color) {
    return color / (color + 1.0);
}

vec3 gamma_correct(vec3 color) {
    return pow(color, vec3(1.0 / 2.2));
}

void main() {
    const int MAX_RECURSION_DEPTH = 4;

    // Get coords and put into view and perspective
    const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    const vec2 alpha_beta = coord_scale * (pixel_coords - coord_dims + 0.5);

    // Initial ray starts from eye and shoots towards screen location
    vec3 ray_dir = normalize(alpha_beta.x * eye_coord_frame[0] +
                             alpha_beta.y * eye_coord_frame[1] -
                                            eye_coord_frame[2]);
    vec3 ray_pos = eye_pos;

    vec3 color = vec3(0.0);
    vec3 reflectance = vec3(1.0);

    for (int recursion_depth = 0; recursion_depth < MAX_RECURSION_DEPTH; recursion_depth++) {
        Ray ray = create_ray(ray_pos, ray_dir);

        // Find intersection
        if (!intersects_object(ray)) {
            break;
        }

        vec3 intersection_position = ray.point + ray.length * ray.direction;
        vec3 intersection_normal;
        Intersectable intersectable = intersectables[ray.intersectable_index];
        Material intersection_material = materials[ray.intersectable_index];

        // Intersected sphere
        if (ray.intersectable_index < num_spheres) {
            // Normal is simply the vector from center to intersection point
            intersection_normal = normalize(intersection_position - intersectable.data[0].xyz);
        // Intersected triangle
        } else if (ray.intersectable_index < num_spheres + num_triangles) {
            intersection_normal = normalize(intersectable.data[1].xyz);
        // Intersected box
        } else {
            // c is the center of the aabb
            vec3 c = (intersectable.data[0] + intersectable.data[1]).xyz / 2.0f;
            // p is the vector from the center to intersection point
            vec3 p = abs(intersection_position - c);
            // h is the vector of half lengths
            vec3 h = intersectable.data[1].xyz - c;
            // At the intersection point, the normal will be the component of p
            // that is roughly the same as the corresponding component of h
            intersection_normal = normalize(floor(p / h + 1e-4));
        }

        vec3 intersection_color = intersection_material.albedo.xyz *
                                  intersection_material.mra.z * 0.03;

        // Calculate light contribution
        for (int i = 0; i < num_point_lights; i++) {
            vec3 ray_to_light_dir = lights[i].position.xyz - intersection_position;
            float light_distance = length(ray_to_light_dir);
            Ray light_ray = create_ray(intersection_position, normalize(ray_to_light_dir));

            // If the light ray is not blocked by any object, calculate color
            if (!intersects_object(light_ray, light_distance)) {
                intersection_color += calc_color(lights[i].position.xyz, lights[i].color.xyz,
                                                 light_distance * light_distance, eye_pos,
                                                 intersection_position, intersection_normal,
                                                 intersection_material);
            }
        }

        // Ray is now reflected off intersection point
        ray_dir = reflect(ray_dir, intersection_normal);
        ray_pos = intersection_position;

        color += reflectance * intersection_color;
        reflectance *= intersection_material.reflectance.xyz;
    }

    imageStore(img_output, pixel_coords, vec4(gamma_correct(tone_mapping(color)), 1.0));
}
